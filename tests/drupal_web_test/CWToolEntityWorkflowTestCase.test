<?php
/**
 * @file
 *
 * CWTool entity tests.
 */

use CW\Factory\EntityControllerFactory;
use CW\Controller\NodeController;
use CW\Controller\UserController;
use CW\Factory\UserControllerFactory;
use CW\Factory\NodeCreator;
use CW\Factory\UserCreator;
use CW\Params\NodeCreationParams;
use CW\Params\UserCreationParams;

/**
 * Class CWToolEntityWorkflowTestCase
 * Entity related tests.
 */
class CWToolEntityWorkflowTestCase extends DrupalWebTestCase {

  /**
   * @var NodeController
   */
  private $nodeController;

  /**
   * @var UserController
   */
  private $userController;

  /**
   * Implements DrupalTestCase::getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'CWTools entity workflow test',
      'description' => 'Entity workflow test.',
      'group' => 'CW',
    );
  }

  /**
   * Implements DrupalTestCase::setUp().
   */
  public function setUp() {
    parent::setUp(array('cw_tool'));
    
    /** @var EntityControllerFactory $nodeFactory */
    $nodeFactory = cw_tool_get_container()[CWTOOL_SERVICE_NODE_FACTORY];
    $nodeParams = new NodeCreationParams('article', 'foobar');
    $this->nodeController = $nodeFactory->initNew(new NodeCreator($nodeParams));

    /** @var UserControllerFactory $userFactory */
    $userFactory = cw_tool_get_container()[CWTOOL_SERVICE_USER_FACTORY];
    $userParams = new UserCreationParams('johndoe');
    $userParams->addRole(UserController::ROLE_AUTHENTICATED_USER);
    $this->userController = $userFactory->initNew(new UserCreator($userParams));
  }

  private static function fetchNodeFromDB($nid) {
    return db_query('
      SELECT *
      FROM {node}
      WHERE nid = :nid
    ', array(':nid' => $nid))->fetchObject();
  }

  private static function fetchUserFromDB($uid) {
    return db_query('
      SELECT *
      FROM {users}
      WHERE uid = :uid
    ', array(':uid' => $uid))->fetchObject();
  }

  public function testNodeCreationUpdateAndDelete() {
    // Verify the created node and node controller.
    $this->assertEqual(get_class($this->nodeController), 'CW\Controller\NodeController');
    $this->assertTrue(is_object($this->nodeController->entity()));
    $this->assertTrue(is_object($this->nodeController->metadata()));

    // Check against DB data.
    $nid = $this->nodeController->getEntityId();
    $nodeFromDB = self::fetchNodeFromDB($nid);
    $this->assertEqual($nodeFromDB->title, $this->nodeController->entity()->title);
    $this->assertEqual($nodeFromDB->nid, $this->nodeController->entity()->nid);

    // Update title and save with node API.
    $newTitle = 'new-title';
    $this->nodeController->entity()->title = $newTitle;
    $this->nodeController->save();
    $nodeFromDBReload = self::fetchNodeFromDB($nid);
    $this->assertEqual($newTitle, $nodeFromDBReload->title);

    // Update title through entity metadata wrapper.
    $newTitle = 'new-title-2';
    $this->nodeController->metadata()->title = $newTitle;
    $this->nodeController->metadata()->save();
    $nodeFromDBReload2 = self::fetchNodeFromDB($nid);
    $this->assertEqual($newTitle, $nodeFromDBReload2->title);

    // Delete node.
    $this->nodeController->delete();
    $nodeFromDBReload3 = self::fetchNodeFromDB($nid);
    $this->assertFalse($nodeFromDBReload3);
  }

  public function testUserCreationAndUpdate() {
    // Verify the created node and node controller.
    $this->assertEqual(get_class($this->userController), 'CW\Controller\UserController');
    $this->assertTrue(is_object($this->userController->entity()));
    $this->assertTrue(is_object($this->userController->metadata()));

    $uid = $this->userController->getEntityId();
    $userFromDB = self::fetchUserFromDB($uid);
    $this->assertEqual('johndoe', $userFromDB->name);

    // Change name through metadata wrapper.
    $newName = 'new-name';
    $this->userController->metadata()->name = $newName;
    $this->userController->metadata()->save();
    $userFromDBReload = self::fetchUserFromDB($uid);
    $this->assertEqual($newName, $userFromDBReload->name);

    // Delete.
    $this->userController->delete();
    $userFromDBReload2 = self::fetchUserFromDB($uid);
    $this->assertFalse($userFromDBReload2);
  }

  public function testControllerLoadFromEntity() {
    /** @var EntityControllerFactory $nodeFactory */
    $nodeFactory = cw_tool_get_container()[CWTOOL_SERVICE_NODE_FACTORY];
    $nodeParams = new NodeCreationParams('article', 'foobar');
    $nodeCreator = new NodeCreator($nodeParams);
    $node = $nodeCreator->create();

    $nodeController = $nodeFactory->initWithEntity($node);
    $this->assertEqual($node, $nodeController->entity());
    $this->assertEqual($node->nid, $nodeController->getEntityId());
  }

}

<?php
/**
 * @file
 *
 * Helper functions.
 */

use CW\Controller\EntityControllerFactory;
use CW\Controller\NodeController;
use CW\Controller\UserController;
use CW\Controller\UserControllerFactory;
use Symfony\Component\Config\FileLocator;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\Loader\YamlFileLoader;

require_once __DIR__ . '/vendor/autoload.php';
require_once __DIR__ . '/includes/cw_tool.content.inc';
require_once __DIR__ . '/includes/cw_tool.util.inc';

/**
 * Get the dependency injection container.
 *
 * @return \Symfony\Component\DependencyInjection\ContainerBuilder
 */
function cw_tool_get_container() {
  static $container;

  if (!empty($container)) {
    return $container;
  }

  // @todo add weight so it's sortable
  $containerConfigs = new \CW\Util\ServiceContainerDefinitionCollection();
  $containerConfigs->add(__DIR__ . '/config');
  drupal_alter('cw_tool_service_container_definition', $containerConfigs);

  $container = new ContainerBuilder();

  foreach ($containerConfigs->getConfigs() as $containerConfig) {
    $locator = new FileLocator(array($containerConfig));
    $loader = new YamlFileLoader($container, $locator);
    $loader->load('services.yml');
  }

  $container->compile();

  return $container;
}

/**
 * @param $nid
 * @return NodeController
 */
function cw_tool_get_node($nid) {
  static $node_factory;

  if (!isset($node_factory)) {
    /** @var EntityControllerFactory $node_factory */
    $node_factory = cw_tool_get_container()->get('cw.node-controller.factory');
  }

  return $node_factory->initWithId($nid);
}

/**
 * @param $uid
 * @return UserController
 */
function cw_tool_get_user($uid) {
  static $user_factory;

  if (!isset($user_factory)) {
    /** @var UserControllerFactory $user_factory */
    $user_factory = cw_tool_get_container()->get('cw.user-controller.factory');
  }

  return $user_factory->initWithId($uid);
}

/**
 * @return UserController
 */
function cw_tool_get_user_current() {
  static $current_user;

  if (!isset($current_user)) {
    /** @var UserControllerFactory $user_factory */
    $user_factory = cw_tool_get_container()->get('cw.user-controller.factory');
    $current_user = $user_factory->initWithCurrentUser();
  }

  return $current_user;
}

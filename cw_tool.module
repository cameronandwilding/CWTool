<?php
/**
 * @file
 *
 * Main CWTool module file.
 */

use CW\Factory\EntityControllerFactory;
use CW\Form\VariableFormGenerator;
use CW\Manager\VariableManager;
use CW\Util\CronTimer;
use CW\Util\FormUtil;
use Pimple\Container;

require_once __DIR__ . '/vendor/autoload.php';

// Service names.
define('CWTOOL_SERVICE_LOGGER', 'cw.logger');
define('CWTOOL_SERVICE_IDENTITY_MAP', 'cw.identity-map');
define('CWTOOL_SERVICE_OBJECT_HANDLER', 'cw.object-handler.drupal');
define('CWTOOL_SERVICE_NODE_FACTORY', 'cw.node-controller.factory');
define('CWTOOL_SERVICE_USER_FACTORY', 'cw.user-controller.factory');
define('CWTOOL_SERVICE_BATCH_ENTITY_SAVER', 'cw.entity-batch-saver');
define('CWTOOL_SERVICE_VARIABLE_MANAGER', 'cw.variable-manager');
define('CWTOOL_SERVICE_VARIABLE_ADAPTER', 'cw.variable-adapter');
define('CWTOOL_SERVICE_CRON_TIMER', 'cw.cron-timer');
define('CWTOOL_SERVICE_FILE_FACTORY', 'cw.file-controller.factory');
define('CWTOOL_SERVICE_TAXONOMY_TERM_FACTORY', 'cw.taxonomy-term-controller.factory');

/**
 * Dependency injection configuration.
 *
 * @return \Pimple\Container
 */
function cw_tool_get_container() {
  static $container;

  if (!empty($container)) {
    return $container;
  }

  $container = new Container();

  $container[CWTOOL_SERVICE_LOGGER] = function (Container $c) {
    return new \Drupal\PSR3\Logger\Watchdog();
  };

  $container[CWTOOL_SERVICE_IDENTITY_MAP] = function (Container $c) {
    return new \CW\Util\LocalProcessIdentityMap();
  };

  $container[CWTOOL_SERVICE_OBJECT_HANDLER] = function (Container $c) {
    return new \CW\Model\DrupalObjectHandler();
  };

  $container[CWTOOL_SERVICE_NODE_FACTORY] = function (Container $c) {
    return new EntityControllerFactory(
      $c[CWTOOL_SERVICE_IDENTITY_MAP],
      $c[CWTOOL_SERVICE_OBJECT_HANDLER],
      'CW\Controller\NodeController',
      'node',
      $c[CWTOOL_SERVICE_LOGGER]
    );
  };

  $container[CWTOOL_SERVICE_USER_FACTORY] = function (Container $c) {
    return new EntityControllerFactory(
      $c[CWTOOL_SERVICE_IDENTITY_MAP],
      $c[CWTOOL_SERVICE_OBJECT_HANDLER],
      'CW\Controller\UserController',
      'user',
      $c[CWTOOL_SERVICE_LOGGER]
    );
  };

  $container[CWTOOL_SERVICE_FILE_FACTORY] = function (Container $c) {
    return new EntityControllerFactory(
      $c[CWTOOL_SERVICE_IDENTITY_MAP],
      $c[CWTOOL_SERVICE_OBJECT_HANDLER],
      'CW\Controller\FileController',
      'file',
      $c[CWTOOL_SERVICE_LOGGER]
    );
  };

  $container[CWTOOL_SERVICE_TAXONOMY_TERM_FACTORY] = function (Container $c) {
    return new EntityControllerFactory(
      $c[CWTOOL_SERVICE_IDENTITY_MAP],
      $c[CWTOOL_SERVICE_OBJECT_HANDLER],
      'CW\Controller\TaxonomyTermController',
      'taxonomy_term',
      $c[CWTOOL_SERVICE_LOGGER]
    );
  };

  $container[CWTOOL_SERVICE_BATCH_ENTITY_SAVER] = function (Container $c) {
    return new CW\Util\EntityBatchSaver(
      $c[CWTOOL_SERVICE_IDENTITY_MAP],
      $c[CWTOOL_SERVICE_LOGGER]
    );
  };

  $container[CWTOOL_SERVICE_VARIABLE_MANAGER] = function (Container $c) {
    return new VariableManager($c[CWTOOL_SERVICE_LOGGER]);
  };

  $container[CWTOOL_SERVICE_VARIABLE_ADAPTER] = function (Container $c) {
    return new \CW\Adapter\DrupalVariableAdapter();
  };

  $container[CWTOOL_SERVICE_CRON_TIMER] = function (Container $c) {
    return new CronTimer($c[CWTOOL_SERVICE_VARIABLE_ADAPTER]);
  };

  drupal_alter('cw_tool_service_container_definition', $container);

  return $container;
}

/**
 * Implements hook_menu().
 */
function cw_tool_menu() {
  return array(
    // Admin section.
    'admin/config/application' => array(
      'title' => 'Application settings',
      'description' => 'Application settings.',
      'position' => 'left',
      'weight' => -10,
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('access administration pages'),
      'file' => 'system.admin.inc',
    ),

    // Variable settings page.
    'admin/config/application/variables' => array(
      'title' => 'Variables',
      'description' => 'Environment app variables.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('cw_tool_core_admin_settings_form'),
      'access arguments' => array('access administration pages'),
    ),
  );
}

function cw_tool_core_admin_settings_form($form) {
  /** @var VariableManager $variableManager */
  $variableManager = cw_tool_get_container()[CWTOOL_SERVICE_VARIABLE_MANAGER];
  $variableManager->collectAppVariables();
  $variablesForm = new VariableFormGenerator($variableManager);
  return $variablesForm->generateForm($form);
}

/**
 * @return CronTimer
 */
function cw_tool_cron_timer() {
  return cw_tool_get_container()[CWTOOL_SERVICE_CRON_TIMER];
}

/**
 * @return \CW\Adapter\VariableAdapter
 */
function cw_tool_variable_adapter() {
  return cw_tool_get_container()[CWTOOL_SERVICE_VARIABLE_ADAPTER];
}

/**
 * @return \Psr\Log\LoggerInterface
 */
function cw_tool_logger() {
  return cw_tool_get_container()[CWTOOL_SERVICE_LOGGER];
}

/**
 * @return EntityControllerFactory
 */
function cw_tool_file_factory() {
  return cw_tool_get_container()[CWTOOL_SERVICE_FILE_FACTORY];
}

/**
 * @return EntityControllerFactory
 */
function cw_tool_taxonomy_term_factory() {
  return cw_tool_get_container()[CWTOOL_SERVICE_TAXONOMY_TERM_FACTORY];
}

/**
 * CWTool form validator proxy for registered validator.
 *
 * @param array $form
 * @param array $form_state
 */
function cw_tool_form_util_validate(&$form, &$form_state) {
  FormUtil::callHook(FormUtil::HOOK_VALIDATE, $form, $form_state);
}

function cw_tool_form_util_submit(&$form, &$form_state) {
  FormUtil::callHook(FormUtil::HOOK_SUBMIT, $form, $form_state);
}

function cw_tool_form_util_after_build($form, $form_state) {
  return FormUtil::callAfterBuildHook($form, $form_state);
}

/**
 * Adds the CWTool JS file to the page load.
 */
function cw_tool_include_js() {
  drupal_add_js(drupal_get_path('module', 'cw_tool') . '/javascript/cw_tool.js');
}

/**
 * Load the utility functions.
 */
function cw_tool_include_util() {
  require_once __DIR__ . '/includes/cw_tool.util.inc';
}

/**
 * Load the content helper functions.
 */
function cw_tool_include_content() {
  require_once __DIR__ . '/includes/cw_tool.content.inc';
}

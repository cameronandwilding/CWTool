<?php

/**
 * @file
 * Contains \Drupal\Core\Access\CsrfAccessCheck.
 */

namespace Drupal\Core\Access;

use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Routing\Access\AccessInterface as RoutingAccessInterface;
use Symfony\Component\Routing\Route;
use Symfony\Component\HttpFoundation\Request;

/**
 * Allows access to routes to be controlled by a '_csrf_token' parameter.
 *
 * To use this check, add a "token" GET parameter to URLs of which the value is
 * a token generated by \Drupal::csrfToken()->get() using the same value as the
 * "_csrf_token" parameter in the route.
 */
class CsrfAccessCheck implements RoutingAccessInterface {

  /**
   * The CSRF token generator.
   *
   * @var \Drupal\Core\Access\CsrfTokenGenerator
   */
  protected $csrfToken;

  /**
   * Constructs a CsrfAccessCheck object.
   *
   * @param \Drupal\Core\Access\CsrfTokenGenerator $csrf_token
   *   The CSRF token generator.
   */
  function __construct(CsrfTokenGenerator $csrf_token) {
    $this->csrfToken = $csrf_token;
  }

  /**
   * {@inheritdoc}
   */
  public function access(Route $route, Request $request, AccountInterface $account) {
    // If this is the controller request, check CSRF access as normal.
    if ($request->attributes->get('_controller_request')) {
      return $this->csrfToken->validate($request->query->get('token'), $request->attributes->get('_system_path')) ? static::ALLOW : static::KILL;
    }

    // Otherwise, this could be another requested access check that we don't
    // want to check CSRF tokens on.
    $conjunction = $route->getOption('_access_mode') ?: 'ANY';
    // Return ALLOW if all access checks are needed.
    if ($conjunction == 'ALL') {
      return static::ALLOW;
    }
    // Return DENY otherwise, as another access checker should grant access
    // for the route.
    else {
      return static::DENY;
    }
  }

}

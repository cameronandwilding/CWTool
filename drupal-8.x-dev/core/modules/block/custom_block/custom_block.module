<?php

/**
 * @file
 * Allows the creation of custom blocks through the user interface.
 */

use Drupal\custom_block\Entity\CustomBlockType;
use Drupal\custom_block\Entity\CustomBlock;

/**
 * Implements hook_help().
 */
function custom_block_help($path, $arg) {
  switch ($path) {
    case 'admin/help#custom_block':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Custom Block module allows you to create blocks of content, which can be placed in regions throughout the website. Custom blocks can have fields; see the <a href="!field-help">Field module help</a> for more information. Once created, custom blocks can be placed like blocks provided by other modules; see the <a href="!blocks">Block module help page</a> for details. For more information, see <a href="!online-help">the online documentation for the Custom Block module</a>.', array('!custom-blocks' => \Drupal::url('custom_block.list'), '!field-help' => \Drupal::url('help.page', array('name' => 'field')), '!blocks' => \Drupal::url('help.page', array('name' => 'block')), '!online-help' => 'https://drupal.org/documentation/modules/custom_block')) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Creating and managing custom block types') . '</dt>';
      $output .= '<dd>' . t('Users with the <em>Administer blocks</em> permission can create different custom block types, each with different fields and display settings, from the <a href="!types">Custom block types</a> page. The Custom block types page lists all of your created custom block types, and allows you to edit and manage them. For more information about managing fields and display settings, see the <a href="!field-ui">Field UI module help</a>.', array('!types' => \Drupal::url('custom_block.type_list'), '!field-ui' => \Drupal::url('help.page', array('name' => 'field_ui')))) . '</dd>';
      $output .= '<dt>' . t('Creating custom blocks') . '</dt>';
      $output .= '<dd>' . t('Users with the <em>Administer blocks</em> permission can <a href="!block-add">add custom blocks</a> of each of their defined custom block types. Created custom blocks are then listed on the <a href="!blocks">Blocks administration page</a>.', array('!blocks' => \Drupal::url('block.admin_display'), '!block-add' => \Drupal::url('custom_block.add_page'))) . '</dd>';
      $output .= '</dl>';
      return $output;

    case 'admin/structure/block/custom-blocks':
      $output = '<p>' . t('This page lists user-created blocks. These blocks are derived from block types. A block type can consist of different fields and display settings. From the block types tab you can manage these fields as well as create new block types.') . '</p>';
      return $output;

    case 'admin/structure/block/custom-blocks/types':
      $output = '<p>' . t('This page lists block types. A block type can consist of different fields and display settings. From here you can manage these fields as well as create new block types.') . '</p>';
      return $output;

  }
}

/**
 * Implements hook_menu_local_tasks().
 */
function custom_block_menu_local_tasks(&$data, $route_name) {
  if ($route_name == 'custom_block.list') {
    // @todo Move to a LocalAction plugin when https://drupal.org/node/2045267
    //   allows local actions to work with query strings.
    $item = menu_get_item('block/add');
    if ($item['access']) {
      // Add a destination parameter.
      $item['localized_options']['query']['destination'] = 'admin/structure/block/custom-blocks';
      $data['actions']['block/add'] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_menu().
 */
function custom_block_menu() {
  $items['admin/structure/block/custom-blocks'] = array(
    'title' => 'Custom block library',
    'description' => 'Manage custom blocks.',
    'route_name' => 'custom_block.list',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/structure/block/custom-blocks/manage/%custom_block_type'] = array(
    'title' => 'Edit custom block type',
    'title callback' => 'entity_page_label',
    'title arguments' => array(5),
    'route_name' => 'custom_block.type_edit',
  );

  $items['block/add'] = array(
    'title' => 'Add custom block',
    'description' => 'Add custom block',
    'route_name' => 'custom_block.add_page',
  );

  return $items;
}

/**
 * Implements hook_menu_link_defaults().
 */
function custom_block_menu_link_defaults() {
  $links['custom_block.add_page'] = array(
    'link_title' => 'Add custom block',
    'description' => 'Add custom block',
    'route_name' => 'custom_block.add_page',
  );

  return $links;
}

/**
 * Implements hook_theme().
 */
function custom_block_theme($existing, $type, $theme, $path) {
  return array(
    'custom_block_add_list' => array(
      'variables' => array('content' => NULL),
      'file' => 'custom_block.pages.inc',
      'template' => 'custom-block-add-list',
    ),
  );
}

/**
 * Loads a custom block type.
 *
 * @param int $id
 *   The ID of the custom block type to load.
 *
 * @return \Drupal\custom_block\Entity\CustomBlockType|null
 *   A CustomBlockType object or NULL if the requested $id does not exist.
 */
function custom_block_type_load($id) {
  return entity_load('custom_block_type', $id);
}

/**
 * Loads a custom block.
 *
 * @param int $id
 *   The id of the custom block.
 *
 * @return \Drupal\custom_block\Entity\CustomBlock|null
 *   A CustomBlock object or NULL if the requested $id does not exist.
 */
function custom_block_load($id) {
  return entity_load('custom_block', $id);
}

/**
 * Implements hook_entity_info_alter().
 */
function custom_block_entity_info_alter(&$entity_info) {
  /** @var $entity_info \Drupal\Core\Entity\EntityTypeInterface[] */
  // Add a translation handler for fields if the language module is enabled.
  if (\Drupal::moduleHandler()->moduleExists('language')) {
    $translation = $entity_info['custom_block']->get('translation');
    $translation['custom_block'] = TRUE;
    $entity_info['custom_block']->set('translation', $translation);
  }
}

/**
 * Implements hook_entity_bundle_info().
 */
function custom_block_entity_bundle_info() {
  $bundles = array();
  foreach (config_get_storage_names_with_prefix('custom_block.type.') as $config_name) {
    $config = \Drupal::config($config_name);
    $bundles['custom_block'][$config->get('id')]['label'] = $config->get('label');
  }
  return $bundles;
}

/**
 * Adds the default body field to a custom block type.
 *
 * @param string $block_type_id
 *   Id of the block type.
 * @param string $label
 *   (optional) The label for the body instance. Defaults to 'Block body'
 *
 * @return array()
 *   Body field instance.
 */
function custom_block_add_body_field($block_type_id, $label = 'Block body') {
  // Add or remove the body field, as needed.
  $field = field_info_field('custom_block', 'body');
  $instance = field_info_instance('custom_block', 'body', $block_type_id);
  if (empty($field)) {
    $field = entity_create('field_entity', array(
      'name' => 'body',
      'entity_type' => 'custom_block',
      'type' => 'text_with_summary',
    ));
    $field->save();
  }
  if (empty($instance)) {
    $instance = entity_create('field_instance', array(
      'field_name' => 'body',
      'entity_type' => 'custom_block',
      'bundle' => $block_type_id,
      'label' => $label,
      'settings' => array('display_summary' => FALSE),
    ));
    $instance->save();

    // Assign widget settings for the 'default' form mode.
    entity_get_form_display('custom_block', $block_type_id, 'default')
      ->setComponent('body', array(
        'type' => 'text_textarea_with_summary',
      ))
      ->save();

    // Assign display settings for 'default' view mode.
    entity_get_display('custom_block', $block_type_id, 'default')
      ->setComponent('body', array(
        'label' => 'hidden',
        'type' => 'text_default',
      ))
      ->save();
  }

  return $instance;
}

/**
 * Implements hook_admin_paths().
 */
function custom_block_admin_paths() {
  $paths = array(
    'block/add' => TRUE,
    'block/add/*' => TRUE,
    'block/*' => TRUE,
    'block/*/delete' => TRUE,
    'admin/structure/block/custom-blocks/*' => TRUE,
  );
  return $paths;
}

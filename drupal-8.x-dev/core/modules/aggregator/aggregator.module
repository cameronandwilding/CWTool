<?php

/**
 * @file
 * Used to aggregate syndicated content (RSS, RDF, and Atom).
 */

use Drupal\aggregator\Entity\Feed;
use Drupal\Component\Plugin\Exception\PluginException;

/**
 * Denotes that a feed's items should never expire.
 */
const AGGREGATOR_CLEAR_NEVER = 0;

/**
 * Implements hook_help().
 */
function aggregator_help($path, $arg) {
  switch ($path) {
    case 'admin/help#aggregator':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Aggregator module is an on-site syndicator and news reader that gathers and displays fresh content from RSS-, RDF-, and Atom-based feeds made available across the web. Thousands of sites (particularly news sites and blogs) publish their latest headlines in feeds, using a number of standardized XML-based formats. For more information, see the <a href="!aggregator-module">online documentation for the Aggregator module</a>.', array('!aggregator-module' => 'https://drupal.org/documentation/modules/aggregator')) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Viewing feeds') . '</dt>';
      $output .= '<dd>' . t('Users view feed content in the <a href="!aggregator">main aggregator display</a>, or by <a href="!aggregator-sources">their source</a> (usually via an RSS feed reader). The most recent content in a feed can be displayed as a block through the <a href="!admin-block">Blocks administration page</a>.', array('!aggregator' => \Drupal::url('aggregator.page_last'), '!aggregator-sources' => \Drupal::url('aggregator.sources'), '!admin-block' => \Drupal::url('block.admin_display'))) . '</dd>';
      $output .= '<dt>' . t('Adding, editing, and deleting feeds') . '</dt>';
      $output .= '<dd>' . t('Administrators can add, edit, and delete feeds, and choose how often to check each feed for newly updated items on the <a href="!feededit">Feed aggregator administration page</a>.', array('!feededit' => \Drupal::url('aggregator.admin_overview'))) . '</dd>';
      $output .= '<dt>' . t('<abbr title="Outline Processor Markup Language">OPML</abbr> integration') . '</dt>';
      $output .= '<dd>' . t('A <a href="!aggregator-opml">machine-readable OPML file</a> of all feeds is available. OPML is an XML-based file format used to share outline-structured information such as a list of RSS feeds. Feeds can also be <a href="!import-opml">imported via an OPML file</a>.', array('!aggregator-opml' => \Drupal::url('aggregator.opml_page'), '!import-opml' => \Drupal::url('aggregator.opml_add'))) . '</dd>';
      $output .= '<dt>' . t('Configuring cron') . '</dt>';
      $output .= '<dd>' . t('A correctly configured <a href="!cron">cron maintenance task</a> is required to update feeds automatically.', array('!cron' => \Drupal::url('system.cron_settings'))) . '</dd>';
      $output .= '</dl>';
      return $output;
    case 'admin/config/services/aggregator':
      // Don't use placeholders for possibility to change URLs for translators.
      $output = '<p>' . t('Thousands of sites (particularly news sites and blogs) publish their latest headlines and posts in feeds, using a number of standardized XML-based formats. Formats supported by the aggregator include <a href="http://cyber.law.harvard.edu/rss/">RSS</a>, <a href="http://www.w3.org/RDF/">RDF</a>, and <a href="http://www.atomenabled.org">Atom</a>.') . '</p>';
      $output .= '<p>' . t('Current feeds are listed below, and <a href="!addfeed">new feeds may be added</a>. At the <a href="!block">blocks administration page</a> you can enable for each feed the block <em>Aggregator feed</a> that contains the <em>latest items</em> .', array('!addfeed' => \Drupal::url('aggregator.feed_add'), '!block' => \Drupal::url('block.admin_display'))) . '</p>';
      return $output;
    case 'admin/config/services/aggregator/add/feed':
      return '<p>' . t('Add a feed in RSS, RDF or Atom format. A feed may only have one entry.') . '</p>';
    case 'admin/config/services/aggregator/add/opml':
      return '<p>' . t('<abbr title="Outline Processor Markup Language">OPML</abbr> is an XML format used to exchange multiple feeds between aggregators. A single OPML document may contain a collection of many feeds. Drupal can parse such a file and import all feeds at once, saving you the effort of adding them manually. You may either upload a local file from your computer or enter a URL where Drupal can download it.') . '</p>';
  }
}

/**
 * Implements hook_theme().
 */
function aggregator_theme() {
  return array(
    'aggregator_feed_source' => array(
      'variables' => array('aggregator_feed' => NULL, 'view_mode' => NULL),
      'file' => 'aggregator.theme.inc',
      'template' => 'aggregator-feed-source',
    ),
    'aggregator_block_item' => array(
      'variables' => array('item' => NULL, 'feed' => 0),
      'file' => 'aggregator.theme.inc',
      'template' => 'aggregator-block-item',
    ),
    'aggregator_summary_items' => array(
      'variables' => array('summary_items' => NULL, 'source' => NULL),
      'file' => 'aggregator.theme.inc',
      'template' => 'aggregator-summary-items',
    ),
    'aggregator_summary_item' => array(
      'variables' => array('aggregator_item' => NULL, 'view_mode' => NULL),
      'file' => 'aggregator.theme.inc',
      'template' => 'aggregator-summary-item',
    ),
    'aggregator_item' => array(
      'variables' => array('aggregator_item' => NULL, 'view_mode' => NULL),
      'file' => 'aggregator.theme.inc',
      'template' => 'aggregator-item',
    ),
    'aggregator_page_opml' => array(
      'variables' => array('feeds' => NULL),
      'file' => 'aggregator.theme.inc',
    ),
    'aggregator_page_rss' => array(
      'variables' => array('feeds' => NULL),
      'file' => 'aggregator.theme.inc',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function aggregator_menu() {
  $items['admin/config/services/aggregator'] = array(
    'title' => 'Feed aggregator',
    'description' => "Configure which content your site aggregates from other sites, and how often it polls them.",
    'route_name' => 'aggregator.admin_overview',
    'weight' => 10,
  );
  $items['admin/config/services/aggregator/remove/%aggregator_feed'] = array(
    'title' => 'Remove items',
    'route_name' => 'aggregator.feed_items_delete',
  );
  $items['admin/config/services/aggregator/update/%aggregator_feed'] = array(
    'title' => 'Update items',
    'route_name' => 'aggregator.feed_refresh',
  );
  $items['aggregator'] = array(
    'title' => 'Feed aggregator',
    'weight' => 5,
    'route_name' => 'aggregator.page_last',
  );
  $items['aggregator/sources'] = array(
    'title' => 'Sources',
    'route_name' => 'aggregator.sources',
  );
  $items['aggregator/sources/%aggregator_feed'] = array(
    'route_name' => 'aggregator.feed_view',
  );
  $items['admin/config/services/aggregator/edit/feed/%aggregator_feed'] = array(
    'title' => 'Edit feed',
    'route_name' => 'aggregator.feed_edit',
  );
  $items['admin/config/services/aggregator/delete/feed/%aggregator_feed'] = array(
    'title' => 'Delete feed',
    'route_name' => 'aggregator.feed_delete',
  );

  return $items;
}

/**
 * Implements hook_menu_link_defaults().
 */
function aggregator_menu_link_defaults() {
  $links = array();
  $links['aggregator.admin_overview'] = array(
    'link_title' => 'Feed aggregator',
    'description' => "Configure which content your site aggregates from other sites, how often it polls them, and how they're categorized.",
    'route_name' => 'aggregator.admin_overview',
    'weight' => 10,
  );
  $links['aggregator'] = array(
    'link_title' => 'Feed aggregator',
    'weight' => 5,
    'route_name' => 'aggregator.page_last',
  );
  $links['aggregator.sources'] = array(
    'link_title' => 'Sources',
    'route_name' => 'aggregator.sources',
  );

  return $links;
}

/**
 * Implements hook_permission().
 */
function aggregator_permission() {
  return array(
    'administer news feeds' => array(
      'title' => t('Administer news feeds'),
    ),
    'access news feeds' => array(
      'title' => t('View news feeds'),
    ),
  );
}

/**
 * Implements hook_cron().
 *
 * Queues news feeds for updates once their refresh interval has elapsed.
 */
function aggregator_cron() {
  $result = db_query('SELECT fid FROM {aggregator_feed} WHERE queued = 0 AND checked + refresh < :time AND refresh <> :never', array(
    ':time' => REQUEST_TIME,
    ':never' => AGGREGATOR_CLEAR_NEVER
  ));
  $queue = \Drupal::queue('aggregator_feeds');
  foreach ($result->fetchCol() as $fid) {
    $feed = aggregator_feed_load($fid);
    if ($queue->createItem($feed)) {
      // Add timestamp to avoid queueing item more than once.
      $feed->setQueuedTime(REQUEST_TIME);
      $feed->save();
    }
  }

  // Remove queued timestamp after 6 hours assuming the update has failed.
  db_update('aggregator_feed')
    ->fields(array('queued' => 0))
    ->condition('queued', REQUEST_TIME - (3600 * 6), '<')
    ->execute();
}

/**
 * Implements hook_queue_info().
 */
function aggregator_queue_info() {
  $queues['aggregator_feeds'] = array(
    'title' => t('Aggregator refresh'),
    'worker callback' => 'aggregator_refresh',
    'cron' => array(
      'time' => 60,
    ),
  );
  return $queues;
}

/**
 * Checks a news feed for new items.
 *
 * @param \Drupal\aggregator\Entity\Feed $feed
 *   An object describing the feed to be refreshed.
 */
function aggregator_refresh(Feed $feed) {
  // Store feed URL to track changes.
  $feed_url = $feed->getUrl();

  $config = \Drupal::config('aggregator.settings');
  // Fetch the feed.
  $fetcher_manager = \Drupal::service('plugin.manager.aggregator.fetcher');
  try {
    $success = $fetcher_manager->createInstance($config->get('fetcher'))->fetch($feed);
  }
  catch (PluginException $e) {
    $success = FALSE;
    watchdog_exception('aggregator', $e);
  }

  // Retrieve processor manager now.
  $processor_manager = \Drupal::service('plugin.manager.aggregator.processor');
  // Store instances in an array so we dont have to instantiate new objects.
  $processor_instances = array();
  foreach ($config->get('processors') as $processor) {
    try {
      $processor_instances[$processor] = $processor_manager->createInstance($processor);
    }
    catch (PluginException $e) {
      watchdog_exception('aggregator', $e);
    }
  }

  // We store the hash of feed data in the database. When refreshing a
  // feed we compare stored hash and new hash calculated from downloaded
  // data. If both are equal we say that feed is not updated.
  $hash = hash('sha256', $feed->source_string);

  if ($success && ($feed->getHash() != $hash)) {
    // Parse the feed.
    $parser_manager = \Drupal::service('plugin.manager.aggregator.parser');
    try {
      if ($parser_manager->createInstance($config->get('parser'))->parse($feed)) {
        if ($feed->getWebsiteUrl()) {
          $feed->setWebsiteUrl($feed->getUrl());
        }
        $feed->setHash($hash);
        // Update feed with parsed data.
        $feed->save();

        // Log if feed URL has changed.
        if ($feed->getUrl() != $feed_url) {
          watchdog('aggregator', 'Updated URL for feed %title to %url.', array('%title' => $feed->label(), '%url' => $feed->getUrl()));
        }

        watchdog('aggregator', 'There is new syndicated content from %site.', array('%site' => $feed->label()));
        drupal_set_message(t('There is new syndicated content from %site.', array('%site' => $feed->label())));

        // If there are items on the feed, let enabled processors process them.
        if (!empty($feed->items)) {
          foreach ($processor_instances as $instance) {
            $instance->process($feed);
          }
        }
      }
    }
    catch (PluginException $e) {
      watchdog_exception('aggregator', $e);
    }
  }
  else {
    drupal_set_message(t('There is no new syndicated content from %site.', array('%site' => $feed->label())));
  }

  // Regardless of successful or not, indicate that this feed has been checked.
  $feed->setLastCheckedTime(REQUEST_TIME);
  $feed->setQueuedTime(0);
  $feed->save();

  // Processing is done, call postProcess on enabled processors.
  foreach ($processor_instances as $instance) {
    $instance->postProcess($feed);
  }
}

/**
 * Loads an aggregator feed.
 *
 * @param int $fid
 *   The feed id.
 *
 * @return \Drupal\aggregator\Entity\Feed
 *   An object describing the feed.
 */
function aggregator_feed_load($fid) {
  return entity_load('aggregator_feed', $fid);
}

/**
 * Renders the HTML content safely, as allowed.
 *
 * @param $value
 *   The content to be filtered.
 *
 * @return
 *   The filtered content.
 */
function aggregator_filter_xss($value) {
  return filter_xss($value, preg_split('/\s+|<|>/', \Drupal::config('aggregator.settings')->get('items.allowed_html'), -1, PREG_SPLIT_NO_EMPTY));
}

/**
 * Implements hook_preprocess_HOOK() for block templates.
 */
function aggregator_preprocess_block(&$variables) {
  if ($variables['configuration']['module'] == 'aggregator') {
    $variables['attributes']['role'] = 'complementary';
  }
}

<?php

/**
 * Implements hook_permission().
 */
function module_test_permission() {
  return array(
    'module_test perm' => t('example perm for module_test module'),
  );
}

/**
 * Implements hook_system_info_alter().
 *
 * Manipulate module dependencies to test dependency chains.
 */
function module_test_system_info_alter(&$info, $file, $type) {
  if (\Drupal::state()->get('module_test.dependency') == 'missing dependency') {
    if ($file->name == 'forum') {
      // Make forum module depend on ban.
      $info['dependencies'][] = 'ban';
    }
    elseif ($file->name == 'ban') {
      // Make ban depend on a made-up module.
      $info['dependencies'][] = 'foo';
    }
  }
  elseif (\Drupal::state()->get('module_test.dependency') == 'dependency') {
    if ($file->name == 'forum') {
      // Make the forum module depend on ban.
      $info['dependencies'][] = 'ban';
    }
    elseif ($file->name == 'ban') {
      // Make ban depend on xmlrpc module.
      $info['dependencies'][] = 'xmlrpc';
    }
  }
  elseif (\Drupal::state()->get('module_test.dependency') == 'version dependency') {
    if ($file->name == 'forum') {
      // Make the forum module depend on ban.
      $info['dependencies'][] = 'ban';
    }
    elseif ($file->name == 'ban') {
      // Make ban depend on a specific version of xmlrpc module.
      $info['dependencies'][] = 'xmlrpc (1.x)';
    }
    elseif ($file->name == 'xmlrpc') {
      // Set xmlrpc module to a version compatible with the above.
      $info['version'] = '8.x-1.0';
    }
  }
  if ($file->name == 'seven' && $type == 'theme') {
    $info['regions']['test_region'] = t('Test region');
  }
  if ($file->name == 'module_test' && \Drupal::state()->get('module_test.hook_system_info_alter')) {
    $info['required'] = TRUE;
    $info['explanation'] = 'Testing hook_system_info_alter()';
  }
}

/**
 * Implements hook_hook_info().
 */
function module_test_hook_info() {
  $hooks['test_hook'] = array(
    'group' => 'file',
  );
  return $hooks;
}

/**
 * Implements hook_menu().
 */
function module_test_menu() {
  $items['module-test/hook-dynamic-loading-invoke'] = array(
    'title' => 'Test hook dynamic loading (invoke)',
    'route_name' => 'module_test.dynamic_invoke',
  );
  $items['module-test/hook-dynamic-loading-invoke-all'] = array(
    'title' => 'Test hook dynamic loading (invoke_all)',
    'route_name' => 'module_test.dynamic_invoke_all',
  );
  $items['module-test/class-loading'] = array(
    'title' => 'Test loading a class from another module',
    'route_name' => 'module_test.class_loading',
  );
  return $items;
}

/**
 * Page callback for 'hook dynamic loading' test.
 *
 * If the hook is dynamically loaded correctly, the menu callback should
 * return 'success!'.
 *
 * @deprecated \Drupal\module_test\Controller\ModuleTestController::hookDynamicLoadingInvoke()
 */
function module_test_hook_dynamic_loading_invoke() {
  $result = \Drupal::moduleHandler()->invoke('module_test', 'test_hook');
  return $result['module_test'];
}

/**
 * Page callback for 'hook dynamic loading' test.
 *
 * If the hook is dynamically loaded correctly, the menu callback should
 * return 'success!'.
 *
 * @deprecated \Drupal\module_test\Controller\ModuleTestController::hookDynamicLoadingInvokeAll()
 */
function module_test_hook_dynamic_loading_invoke_all() {
  $result = \Drupal::moduleHandler()->invokeAll('test_hook');
  return $result['module_test'];
}

/**
 * Load function used by module_test_hook_dynamic_loading_invoke_all_during_load().
 *
 * @see module_test_menu().
 */
function module_test_load($param) {
  $result = \Drupal::moduleHandler()->invokeAll('test_hook');
  return $result[$param];
}

/**
 * Page callback for 'class loading' test.
 *
 * This module does not have a dependency on module_autoload_test.module. If
 * that module is enabled, this function should return the string
 * 'Drupal\\module_autoload_test\\SomeClass::testMethod() was invoked.'. If
 * that module is not enabled, this function should return nothing.
 *
 * @deprecated \Drupal\module_test\Controller\ModuleTestController::testClassLoading()
 */
function module_test_class_loading() {
  if (class_exists('Drupal\module_autoload_test\SomeClass')) {
    $obj = new Drupal\module_autoload_test\SomeClass();
    return $obj->testMethod();
  }
}

/**
 * Implements hook_modules_installed().
 */
function module_test_modules_installed($modules) {
  // Record the ordered list of modules that were passed in to this hook so we
  // can check that the modules were enabled in the correct sequence.
  \Drupal::state()->set('module_test.install_order', $modules);
}

/**
 * Implements hook_modules_uninstalled().
 */
function module_test_modules_uninstalled($modules) {
  // Record the ordered list of modules that were passed in to this hook so we
  // can check that the modules were uninstalled in the correct sequence.
  \Drupal::state()->set('module_test.uninstall_order', $modules);
}

<?php

/**
 * @file
 * Module that implements various hooks for menu tests.
 */

use Drupal\menu_link\Entity\MenuLink;

/**
 * Implements hook_menu().
 */
function menu_test_menu() {
  // The name of the menu changes during the course of the test. Using a GET.
  $items['menu_name_test'] = array(
    'title' => 'Test menu_name router item',
    'route_name' => 'menu_test.menu_name_test',
    'menu_name' => menu_test_menu_name(),
  );
  // This item uses SystemController::systemAdminMenuBlockPage() to list child
  // items.
  $items['menu_callback_description'] = array(
    'title' => 'Menu item title',
    'description' => 'Menu item description parent',
    'route_name' => 'menu_test.callback_description',
  );
  // This item tests the description key.
  $items['menu_callback_description/description-plain'] = array(
    'title' => 'Menu item with a regular description',
    'description' => 'Menu item description text',
    'route_name' => 'menu_test.callback_description_plain',
  );
  // This item tests using a description callback.
  $items['menu_callback_description/description-callback'] = array(
    'title' => 'Menu item with a description set with a callback',
    'description callback' => 'check_plain',
    'description arguments' => array('<strong>Menu item description arguments</strong>'),
    'route_name' => 'menu_test.callback_description_callback',
  );
  // Use FALSE as 'title callback' to bypass t().
  $items['menu_no_title_callback'] = array(
    'title' => 'A title with @placeholder',
    'title callback' => FALSE,
    'title arguments' => array('@placeholder' => 'some other text'),
    'route_name' => 'menu_test.menu_no_title_callback',
  );

  // Hidden link for menu_link_maintain tests
  $items['menu_test_maintain/%'] = array(
    'title' => 'Menu maintain test',
    'route_name' => 'menu_test.menu_test_maintain',
   );
  // Hierarchical tests.
  $items['menu-test/hierarchy/parent'] = array(
    'title' => 'Parent menu router',
    'route_name' => 'menu_test.hierarchy_parent',
  );
  $items['menu-test/hierarchy/parent/child'] = array(
    'title' => 'Child menu router',
    'route_name' => 'menu_test.hierarchy_parent_child',
  );
  $items['menu-test/hierarchy/parent/child2/child'] = array(
    'title' => 'Unattached subchild router',
    'route_name' => 'menu_test.hierarchy_parent_child2',
  );
  // Theme callback tests.
  $items['menu-test/theme-callback/%/inheritance'] = array(
    'title' => 'Page that tests theme negotiation inheritance.',
    'route_name' => 'menu_test.theme_callback_inheritance',
  );
  $items['menu-test/no-theme-callback'] = array(
    'title' => 'Page that displays different themes without using a theme negotiation.',
    'route_name' => 'menu_test.no_theme_callback',
  );
  // Path containing "exotic" characters.
  $path = "menu-test/ -._~!$'\"()*@[]?&+%#,;=:" . // "Special" ASCII characters.
    "%23%25%26%2B%2F%3F" . // Characters that look like a percent-escaped string.
    "éøïвβ中國書۞"; // Characters from various non-ASCII alphabets.
  $items[$path] = array(
    'title' => '"Exotic" path',
    'route_name' => 'menu_test.exotic_path',
  );

  // Hidden tests; base parents.
  // Same structure as in Menu and Block modules. Since those structures can
  // change, we need to simulate our own in here.
  $items['menu-test'] = array(
    'title' => 'Menu test root',
    'route_name' => 'menu_test.menu_test',
  );
  $items['menu-test/hidden'] = array(
    'title' => 'Hidden test root',
    'route_name' => 'menu_test.hidden',
  );

  // Hidden tests; one dynamic argument.
  $items['menu-test/hidden/menu'] = array(
    'title' => 'Menus',
    'route_name' => 'menu_test.hidden_menu',
  );
  $items['menu-test/hidden/menu/list'] = array(
    'title' => 'List menus',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['menu-test/hidden/menu/settings'] = array(
    'title' => 'Settings',
    'route_name' => 'menu_test.hidden_menu_settings',
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  );
  $items['menu-test/hidden/menu/manage/%menu'] = array(
    'title' => 'Customize menu',
    'route_name' => 'menu_test.hidden_manage',
  );
  $items['menu-test/hidden/menu/manage/%menu/list'] = array(
    'title' => 'List links',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE,
  );
  $items['menu-test/hidden/menu/manage/%menu/edit'] = array(
    'title' => 'Edit menu',
    'route_name' => 'menu_test.hidden_manage_edit',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE,
  );
  $items['menu-test/hidden/menu/manage/%menu/delete'] = array(
    'title' => 'Delete menu',
    'route_name' => 'menu_test.hidden_manage_delete',
  );

  // Hidden tests; two dynamic arguments.
  $items['menu-test/hidden/block'] = array(
    'title' => 'Blocks',
    'route_name' => 'menu_test.hidden_block',
  );
  $items['menu-test/hidden/block/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['menu-test/hidden/block/manage/%/%'] = array(
    'title' => 'Configure block',
    'route_name' => 'menu_test.hidden_block_configure',
  );
  $items['menu-test/hidden/block/manage/%/%/delete'] = array(
    'title' => 'Delete block',
    'route_name' => 'menu_test.hidden_block_delete',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_NONE,
  );

  // Breadcrumbs tests.
  // @see \Drupal\system\Tests\Menu\BreadcrumbTest
  // Local tasks: Second level below default local task.
  $items['menu-test/breadcrumb/tasks'] = array(
    'title' => 'Breadcrumbs test: Local tasks',
    'route_name' => 'menu_test.breadcrumbs',
  );
  $items['menu-test/breadcrumb/tasks/first'] = array(
    'title' => 'First',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'route_name' => 'menu_test.breadcrumbs_first',
  );
  $items['menu-test/breadcrumb/tasks/second'] = array(
    'title' => 'Second',
    'type' => MENU_LOCAL_TASK,
    'route_name' => 'menu_test.breadcrumbs_second',
  );
  $items['menu-test/breadcrumb/tasks/first/first'] = array(
    'title' => 'First first',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'route_name' => 'menu_test.breadcrumbs_first_first',
  );
  $items['menu-test/breadcrumb/tasks/first/second'] = array(
    'title' => 'First second',
    'type' => MENU_LOCAL_TASK,
    'route_name' => 'menu_test.breadcrumbs_first_second',
  );
  $items['menu-test/breadcrumb/tasks/second/first'] = array(
    'title' => 'Second first',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'route_name' => 'menu_test.breadcrumbs_second_first',
  );
  $items['menu-test/breadcrumb/tasks/second/second'] = array(
    'title' => 'Second second',
    'type' => MENU_LOCAL_TASK,
    'route_name' => 'menu_test.breadcrumbs_second_second',
  );

  // Menu local tasks tests.
  // @see \Drupal\system\Tests\Menu\TrailTest
  $items['menu-test/tasks'] = array(
    'title' => 'Local tasks',
    'route_name' => 'menu_test.tasks',
  );
  $items['menu-test/tasks/empty'] = array(
    'title' => 'Empty',
    'route_name' => 'menu_test.tasks_empty',
  );
  $items['menu-test/tasks/default'] = array(
    'title' => 'Default only',
    'route_name' => 'menu_test.tasks_default',
  );
  $items['menu-test/tasks/tasks'] = array(
    'title' => 'With tasks',
    'route_name' => 'menu_test.tasks_tasks',
  );

  // Menu trail tests.
  // @see MenuTrailTestCase
  $items['menu-test/menu-trail'] = array(
    'title' => 'Menu trail - Case 1',
    'route_name' => 'menu_test.menu_trail',
  );
  $items['admin/config/development/menu-trail'] = array(
    'title' => 'Menu trail - Case 2',
    'description' => 'Tests menu_tree_set_path()',
    'route_name' => 'menu_test.menu_trail_admin',
  );
  $items['menu-test/custom-403-page'] = array(
    'title' => 'Custom 403 page',
    'route_name' => 'menu_test.custom_403',
  );
  $items['menu-test/custom-404-page'] = array(
    'title' => 'Custom 404 page',
    'route_name' => 'menu_test.custom_404',
  );

  // Test the access key.
  $items['menu-title-test/case1'] = array(
    'title' => 'Example title - Case 1',
    'route_name' => 'menu_test.title_test_case1',
  );
  $items['menu-title-test/case2'] = array(
    'title' => 'Example title',
    'title callback' => 'menu_test_title_callback',
    'route_name' => 'menu_test.title_test_case2',
  );
  $items['menu-title-test/case3'] = array(
    // Title gets completely ignored. Good thing, too.
    'title' => 'Bike sheds full of blue smurfs WRONG',
    'route_name' => 'menu_test.title_test_case3',
  );

  // Parent page for controller-based local tasks.
  $items['foo/%'] = array(
    'title' => 'Controller-based local tasks',
    'route_name' => 'menu_test.router_test1',
  );
  // Controller-based local task.
  $items['foo/%/a'] = array(
    'title' => 'Local task A',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  // Controller-based local task.
  $items['foo/%/b'] = array(
    'title' => 'Local task B',
    'route_name' => 'menu_test.router_test2',
    'type' => MENU_LOCAL_TASK,
  );
  $items['foo/%/c'] = array(
    'title' => 'Local task C',
    'route_name' => 'menu_test.router_test3',
    'type' => MENU_LOCAL_TASK,
  );

  $items['menu-test-local-action'] = array(
    'title' => 'Local action parent',
    'route_name' => 'menu_test.local_action1',
  );

  $items['menu-local-task-test/tasks'] = array(
    'title' => 'Local tasks',
    'route_name' => 'menu_test.local_task_test_tasks',
  );
  $items['menu-test/optional'] = array(
    'title' => 'Test optional placeholder',
    'route_name' => 'menu_test.optional_placeholder',
    'type' => MENU_LOCAL_TASK,
  );

  $items['menu-test/context'] = array(
    'title' => \Drupal::config('menu_test.menu_item')->get('title'),
    'route_name' => 'menu_test.context',
  );

  return $items;
}

/**
 * Implements hook_menu_link_defaults().
 */
function menu_test_menu_link_defaults() {
  // The name of the menu changes during the course of the test. Using a $_GET.
  $items['menu_test.menu_name_test'] = array(
    'link_title' => 'Test menu_name router item',
    'route_name' => 'menu_test.menu_name_test',
    'menu_name' => menu_test_menu_name(),
  );
  // This item uses SystemController::systemAdminMenuBlockPage() to list child
  // items.
  $items['menu_test.menu_callback_description'] = array(
    'link_title' => 'Menu item title',
    'description' => 'Menu item description parent',
    'route_name' => 'menu_test.callback_description',
  );
  // This item tests the description key.
  $items['menu_test.menu_callback_description.description-plain'] = array(
    'link_title' => 'Menu item with a regular description',
    'description' => 'Menu item description text',
    'route_name' => 'menu_test.callback_description_plain',
    'parent' => 'menu_test.menu_callback_description',
  );
  // This item tests using a description callback.
  $items['menu_callback_description.description-callback'] = array(
    'link_title' => 'Menu item with a description set with a callback',
    'route_name' => 'menu_test.callback_description_callback',
    'parent' => 'menu_test.menu_callback_description',
  );

  $items['menu_test.menu_no_title_callback'] = array(
    'link_title' => 'A title with @placeholder',
    'route_name' => 'menu_test.menu_no_title_callback',
  );

  // Hierarchical tests.
  $items['menu_test.hierarchy_parent'] = array(
    'link_title' => 'Parent menu router',
    'route_name' => 'menu_test.hierarchy_parent',
  );
  $items['menu_test.hierarchy_parent.child'] = array(
    'link_title' => 'Child menu router',
    'route_name' => 'menu_test.hierarchy_parent_child',
    'parent' => 'menu_test.hierarchy_parent',
  );
  $items['menu_test.hierarchy_parent.child2.child'] = array(
    'link_title' => 'Unattached subchild router',
    'route_name' => 'menu_test.hierarchy_parent_child2',
    'parent' => 'menu_test.hierarchy_parent.child',
  );
  // Path containing "exotic" characters.
  $exotic = " -._~!$'\"()*@[]?&+%#,;=:" . // "Special" ASCII characters.
    "%23%25%26%2B%2F%3F" . // Characters that look like a percent-escaped string.
    "éøïвβ中國書۞"; // Characters from various non-ASCII alphabets.
  $items['menu_test.exotic_path'] = array(
    'link_title' => '"Exotic" path',
    'route_name' => 'menu_test.exotic_path',
    'route_parameters' => array('exotic' => $exotic),
  );

  // Hidden tests; base parents.
  // Same structure as in Menu and Block modules. Since those structures can
  // change, we need to simulate our own in here.
  $items['menu_test'] = array(
    'link_title' => 'Menu test root',
    'route_name' => 'menu_test.menu_test',
  );
  $items['menu_test.hidden'] = array(
    'link_title' => 'Hidden test root',
    'route_name' => 'menu_test.hidden',
    'parent' => 'menu_test',
  );

  // Hidden tests; one dynamic argument.
  $items['menu_test.hidden.menu'] = array(
    'link_title' => 'Menus',
    'route_name' => 'menu_test.hidden_menu',
    'parent' => 'menu_test.hidden',
  );

  // Hidden tests; two dynamic arguments.
  $items['menu_test.hidden.block'] = array(
    'link_title' => 'Blocks',
    'route_name' => 'menu_test.hidden_block',
    'parent' => 'menu_test.hidden',
  );

  // Menu trail tests.
  // @see MenuTrailTestCase
  $items['menu_test.menu-trail'] = array(
    'link_title' => 'Menu trail - Case 1',
    'route_name' => 'menu_test.menu_trail',
    'parent' => 'menu_test',
  );
  $items['menu_test.admin.config.development.menu-trail'] = array(
    'link_title' => 'Menu trail - Case 2',
    'description' => 'Tests menu_tree_set_path()',
    'route_name' => 'menu_test.menu_trail_admin',
    'parent' => 'system.admin.config.development',
  );
  $items['menu_test.custom-403-page'] = array(
    'link_title' => 'Custom 403 page',
    'route_name' => 'menu_test.custom_403',
    'parent' => 'menu_test',
  );
  $items['menu_test.custom-404-page'] = array(
    'link_title' => 'Custom 404 page',
    'route_name' => 'menu_test.custom_404',
    'parent' => 'menu_test',
  );
  // Test the access key.
  $items['menu_test.menu-title-test.case1'] = array(
    'link_title' => 'Example title - Case 1',
    'route_name' => 'menu_test.title_test_case1',
  );
  $items['menu_test.menu-title-test.case2'] = array(
    'link_title' => 'Example title',
    'route_name' => 'menu_test.title_test_case2',
  );
  $items['menu_test.menu-title-test.case3'] = array(
    // Title gets completely ignored. Good thing, too.
    'link_title' => 'Bike sheds full of blue smurfs',
    'route_name' => 'menu_test.title_test_case3',
  );
  return $items;
}

/**
 * Implements hook_menu_local_tasks().
 *
 * If the menu_test.settings configuration 'tasks.add' has been set, adds
 * several local tasks to menu-test/tasks.
 */
function menu_test_menu_local_tasks(&$data, $route_name) {
  if (!\Drupal::config('menu_test.settings')->get('tasks.add')) {
    return;
  }
  if (in_array($route_name, array('menu_test.tasks_default', 'menu_test.tasks_empty', 'menu_test.tasks_tasks'))) {
    $data['tabs'][0]['foo'] = array(
      '#theme' => 'menu_local_task',
      '#link' => array(
        'title' => 'Task 1',
        'href' => 'task/foo',
      ),
      '#weight' => 10,
    );
    $data['tabs'][0]['bar'] = array(
      '#theme' => 'menu_local_task',
      '#link' => array(
        'title' => 'Task 2',
        'href' => 'task/bar',
      ),
      '#weight' => 20,
    );
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * If the menu_test.settings configuration 'tasks.alter' has been set, adds
 * several local tasks to menu-test/tasks.
 */
function menu_test_menu_local_tasks_alter(&$data, $route_name) {
  if (!\Drupal::config('menu_test.settings')->get('tasks.alter')) {
    return;
  }
  if (in_array($route_name, array('menu_test.tasks_default', 'menu_test.tasks_empty', 'menu_test.tasks_tasks'))) {
    // Rename the default local task from 'View' to 'Show'.
    // $data['tabs'] is expected to be keyed by link hrefs.
    // The default local task always links to its parent path, which means that
    // if the tab root path appears as key in $data['tabs'], then that key is
    // the default local task.
    $key = $route_name . '_tab';
    if (isset($data['tabs'][0][$key])) {
      $data['tabs'][0][$key]['#link']['title'] = 'Show it';
    }
    // Rename the 'foo' task to "Advanced settings" and put it last.
    $data['tabs'][0]['foo']['#link']['title'] = 'Advanced settings';
    $data['tabs'][0]['foo']['#weight'] = 110;
  }
}

/**
 * Argument callback: Loads an argument using a function for hook_menu().
 *
 * @param string $arg1
 *   A parameter passed in via the URL.
 *
 * @return false
 *   Always return NULL.
 *
 * @see menu_test_menu();
 */
function menu_test_argument_load($arg1) {
  return NULL;
}

/**
 * Argument callback: Loads an argument using a function for hook_menu().
 *
 * @param string $arg1
 *   A parameter passed in via the URL.
 *
 * @return false
 *   Always return NULL.
 *
 * @see menu_test_menu();
 */
function menu_test_other_argument_load($arg1) {
  return NULL;
}

/**
 * Page callback: Provides a dummy function which can be used as a placeholder.
 *
 * @return string
 *   A string that can be used for comparison.
 *
 * @see menu_test_menu().
 *
 * @deprecated Use \Drupal\menu_test\Controller\MenuTestController::menuTestCallback()
 */
function menu_test_callback() {
  return 'This is menu_test_callback().';
}

/**
 * Page callback: Tests menu_test_menu_tree_set_path().
 *
 * Retrieves the current menu path and if the menu path is not empty updates
 * the menu path that is used to determine the active menu trail.
 *
 * @return string
 *   A string that can be used for comparison.
 *
 * @see menu_test_menu().
 *
 * @deprecated Use \Drupal\menu_test\Controller\MenuTestController::menuTrail()
 */
function menu_test_menu_trail_callback() {
  $menu_path = \Drupal::state()->get('menu_test.menu_tree_set_path') ?: array();
  if (!empty($menu_path)) {
    menu_tree_set_path($menu_path['menu_name'], $menu_path['path']);
  }
  return 'This is menu_test_menu_trail_callback().';
}

/**
 * Page callback: Sets the active menu trail for our custom 403 and 404 pages.
 *
 * @return string
 *   A text string that can be used for comparison.
 *
 * @see menu_test_menu().
 *
 * @deprecated Use \Drupal\menu_test\Controller\MenuTestController::custom403404()
 */
function menu_test_custom_403_404_callback() {
  // When requested by one of the TrailTest tests, record the final
  // active trail now that the user has been redirected to the custom 403 or
  // 404 page.
  if (\Drupal::state()->get('menu_test.record_active_trail') ?: FALSE) {
    \Drupal::state()->set('menu_test.active_trail_final', menu_get_active_trail());
  }

  return 'This is menu_test_custom_403_404_callback().';
}

/**
 * Page callback: Tests the theme negotiation functionality.
 *
 * @param bool $inherited
 *   (optional) TRUE when the requested page is intended to inherit
 *   the theme of its parent.
 *
 * @return string
 *   A string describing the requested custom theme and actual theme being used
 *   for the current page request.
 *
 * @see menu_test_menu().
 *
 * @deprecated Use \Drupal\menu_test\Controller\MenuTestController::themePage()
 */
function menu_test_theme_page_callback($inherited = FALSE) {
  global $theme_key;
  // Initialize the theme system so that $theme_key will be populated.
  drupal_theme_initialize();
  // Now we check what the theme negotiator service returns.
  $active_theme = \Drupal::service('theme.negotiator')->getActiveTheme('getActiveTheme');
  $output = "Active theme: $active_theme. Actual theme: $theme_key.";
  if ($inherited) {
    $output .= ' Theme negotiation inheritance is being tested.';
  }
  return $output;
}

/**
 * Sets a static variable for the testMenuName() test.
 *
 * Used to change the menu_name parameter of a menu.
 *
 * @param string $new_name
 *   (optional) If set, will change the $menu_name value.
 *
 * @return string
 *   The $menu_name value to use.
 */
function menu_test_menu_name($new_name = '') {
  static $menu_name = 'original';
  if ($new_name) {
    $menu_name = $new_name;
  }
  return $menu_name;
}

/**
 * Implements hook_menu_link_insert().
 */
function menu_test_menu_link_insert(MenuLink $item) {
  menu_test_static_variable('insert');
}

/**
 * Implements hook_menu_link_update().
 */
function menu_test_menu_link_update(MenuLink $item) {
  menu_test_static_variable('update');
}

/**
 * Implements hook_menu_link_delete().
 */
function menu_test_menu_link_delete(MenuLink $item) {
  menu_test_static_variable('delete');
}

/**
 * Sets a static variable for testing hook results.
 *
 * @param null|string $value
 *   (optional) The value to set or NULL to return the current value.
 *
 * @return null|string
 *   A text string for comparison to test assertions.
 */
function menu_test_static_variable($value = NULL) {
  static $variable;
  if (!empty($value)) {
    $variable = $value;
  }
  return $variable;
}

/**
 * Title callback: Concatenates the title and case number.
 *
 * @param string $title
 *   Title string.
 * @param int $case_number
 *   (optional) The current case number which it tests (defaults to 3).
 *
 * @return string
 *   A string containing the title and case number.
 *
 * @see menu_test_menu().
 */
function menu_test_title_callback($title, $case_number = 3) {
  return t($title) . ' - Case ' . $case_number;
}

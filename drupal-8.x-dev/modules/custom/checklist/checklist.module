<?php

/**
 * @file
 * Allows users to create checklist.
 */

/**
 * Implements hook_menu().
 */
function checklist_menu() {
  $items['admin/config/checklist'] = array(
    'title' => 'Admin page section',
    'description' => 'The checklist admin page section',
    'route_name' => 'checklist.admin',
  );

  $items['admin/config/checklist/settings'] = array(
    'title' => 'Checklist settings',
    'description' => 'The checklist admin page section',
    'route_name' => 'checklist.settings',
  );

  $items['checklist/add'] = array(
    'title' => 'Checklist settings',
    'route_name' => 'checklist.add',
  );

  $items['checklist/edit'] = array(
    'title' => 'Checklist settings',
    'route_name' => 'checklist.edit',
  );

  $items['checklist/%taxonomy_term'] = array(
    'title' => 'Checklist term',
    'route_name' => 'checklist.term',
  );

  return $items;
}

function checklist_permission() {
  return array(
    'edit_checklist' => array(
      'title' => t('Edit checklist content'),
    ),
    'add_checklist' => array(
      'title' => t('Add checklist content'),
    ),
  );
}

/**
 * Implements hook_admin_paths().
 */
function checklist_admin_paths() {
  if (\Drupal::config('checklist.settings')->get('use_admin_theme')) {
    $paths = array(
      'checklist/*/edit' => TRUE,
      'checklist/*/delete' => TRUE,
      'checklist/add' => TRUE,
      'checklist/add/*' => TRUE,
    );
    return $paths;
  }
}

/**
 * Menu argument loader: Loads a Foo type by string.
 *
 * @param $name
 *   The machine name of a Foo type to load.
 *
 * @return \Drupal\checklist\Entity\checklistItemType
 *   A Foo type object or NULL if $name does not exist.
 */
/*
function checklist_type_load($name) {
  return entity_load('checklist_type', $name);
}
*/
/**
 * Loads a checklist item entity from the database.
 *
 * @param int $id
 *   The checklist entity ID.
 * @param bool $reset
 *   (optional) Whether to reset the static cache. Defaults to
 *   FALSE.
 *
 * @return \Drupal\checklist\Entity\checklistItemInterface|null
 *   A fully-populated checklist entity, or NULL if the entity is not found.
 */
function checklist_load($id, $reset = FALSE) {
  return entity_load('checklist_item', $id, $reset);
}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 */
function checklist_field_formatter_settings_summary_alter(&$summary, $context) {
  // Append a message to the summary when an instance of foo_formatter has
  // mysetting set to TRUE for the current view mode.
  if ($context['formatter']->getPluginId() == 'checklist_formatter') {
    if ($context['formatter']->getSetting('mysetting')) {
      $summary[] = t('My setting enabled.');
    }
  }
}

/**
 * Implements hook_theme().
 */
function checklist_formatter_theme() {
  return array(
    'checklist_link_formatter' => array(
      'variables' => array('url' => NULL),
      'template' => 'checklist-link-formatter',
    ),
  );
}
?>


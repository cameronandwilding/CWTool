<?php

use Drupal\comment\Plugin\Field\FieldType\CommentItemInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Language\Language;
use Drupal\devel_generate\DevelGenerateBase;
use Drupal\devel_generate\DevelGenerateFieldBase;
use Drupal\field\Field;

/**
 * Implements hook_menu_link_defaults().
 */
function devel_generate_menu_link_defaults() {
  $items = array();

  $devel_generate_plugins = $devel_generate_manager = \Drupal::service('plugin.manager.develgenerate')->getDefinitions();
  foreach ($devel_generate_plugins as $id => $plugin) {
    $label = $plugin['label'];
    $items["devel_generate.$id"] = array(
      'link_title' => "Generate $label",
      'parent' => 'system.admin.config.development',
      'description' => $plugin['description'],
      'route_name' => "devel_generate.$id",
    );
  }

  return $items;
}

/**
 * Implements hook_permission().
 */
function devel_generate_permission() {
  $permissions = array();

  $devel_generate_plugins = $devel_generate_manager = \Drupal::service('plugin.manager.develgenerate')->getDefinitions();
  foreach ($devel_generate_plugins as $plugin) {

    $permission = $plugin['permission'];
    $permissions[$permission] = array(
      'title' => t($permission),
      'description' => t($permission),
    );

    return $permissions;
  }
  return array(
    'administer my module' => array(
      'title' => t('Administer my module'),
      'description' => t('Perform administration tasks for my module.'),
    ),
  );
}

/**
 * Implements hook_node_insert().
 * Inserts nodes properly based on generation options.
 *
 * @param $node
 *  The base node created on submit. Inspects $node->devel_generate.
 */
function devel_generate_node_insert(EntityInterface $node) {
  if (isset($node->devel_generate)) {
    $results = $node->devel_generate;

    if (!empty($results['max_comments'])) {
      $instances = Field::fieldInfo()->getBundleInstances($node->getEntityTypeId(), $node->bundle());
      foreach ($instances as $instance) {
        $field = $instance->getField();
        if ($field->getType() == 'comment') {
          devel_generate_add_comments($node, $field, $results['users'], $results['max_comments'], $results['title_length']);
        }
      }
    }

    // Add an url alias. Cannot happen before save because we don't know the nid.
    if (!empty($results['add_alias'])) {
      $path = array(
        'source' => 'node/' . $node->id(),
        'alias' => 'node-' . $node->id() . '-' . $node->bundle(),
      );
      drupal_container()->get('path.crud')->save($path['source'], $path['alias']);
    }

    // Add node statistics.
    if (!empty($results['add_statistics']) && \Drupal::moduleHandler()->moduleExists('statistics')) {
      devel_generate_add_statistics($node);
    }
  }
}

function devel_generate_add_comments(EntityInterface $node, $field, $users, $max_comments, $title_length = 8) {
  $field_name = $field->getName();
  if ($node->{$field_name}->status >= CommentItemInterface::OPEN) {
    $num_comments = mt_rand(1, $max_comments);
    for ($i = 1; $i <= $num_comments; $i++) {
      switch ($i % 3) {
        case 1:
          $pid = db_query_range("SELECT cid FROM {comment} WHERE pid = 0 AND entity_id = :entity_id ORDER BY RAND()", 0, 1, array(':entity_id' => $node->id()))->fetchField();
          break;
        case 2:
          $pid = db_query_range("SELECT cid FROM {comment} WHERE pid > 0 AND entity_id = :entity_id ORDER BY RAND()", 0, 1, array(':entity_id' => $node->id()))->fetchField();
          break;
        default:
          $pid = 0;
      }

      $comment = entity_create('comment', array(
        'entity_type' => $node->entityType(),
        'entity_id' => $node->id(),
        'field_id' => $node->entityType() . '__' . $field_name,
        'name' => 'devel generate',
        'mail' => 'devel_generate@example.com',
        'timestamp' => mt_rand($node->created->value, REQUEST_TIME),
        'subject' => substr(DevelGenerateBase::createGreeking(mt_rand(2, $title_length), TRUE), 0, 63),
        'uid' => $users[array_rand($users)],
        'langcode' => Language::LANGCODE_NOT_SPECIFIED,
        'pid' => !empty($pid) ? $pid : 0,
      ));

      //Populate all core fields on behalf of field.module
      DevelGenerateFieldBase::generateFields($node, 'node', $node->bundle());
      $comment->save();
    }
  }
}


/**
 * Generate statistics information for a node.
 *
 * @param $node
 *   A node object.
 */
function devel_generate_add_statistics($node) {
  $statistic = array(
    'nid' => $node->id(),
    'totalcount' => mt_rand(0, 500),
    'timestamp' => REQUEST_TIME - mt_rand(0, $node->created),
  );
  $statistic['daycount'] = mt_rand(0, $statistic['totalcount']);
  db_insert('node_counter')->fields($statistic)->execute();
}
